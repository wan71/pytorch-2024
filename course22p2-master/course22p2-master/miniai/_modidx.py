# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/course22p2',
                'doc_host': 'https://fastai.github.io',
                'git_url': 'https://github.com/fastai/course22p2',
                'lib_path': 'miniai'},
  'syms': { 'miniai\\accel': { 'miniai\\accel.AccelerateCB': ('ddpm_v2.html#acceleratecb', 'miniai\\accel.py'),
                               'miniai\\accel.AccelerateCB.__init__': ('ddpm_v2.html#__init__', 'miniai\\accel.py'),
                               'miniai\\accel.AccelerateCB.backward': ('ddpm_v2.html#backward', 'miniai\\accel.py'),
                               'miniai\\accel.AccelerateCB.before_fit': ('ddpm_v2.html#before_fit', 'miniai\\accel.py'),
                               'miniai\\accel.MixedPrecision': ('ddpm_v2.html#mixedprecision', 'miniai\\accel.py'),
                               'miniai\\accel.MixedPrecision.after_loss': ('ddpm_v2.html#after_loss', 'miniai\\accel.py'),
                               'miniai\\accel.MixedPrecision.backward': ('ddpm_v2.html#backward', 'miniai\\accel.py'),
                               'miniai\\accel.MixedPrecision.before_batch': ('ddpm_v2.html#before_batch', 'miniai\\accel.py'),
                               'miniai\\accel.MixedPrecision.before_fit': ('ddpm_v2.html#before_fit', 'miniai\\accel.py'),
                               'miniai\\accel.MixedPrecision.step': ('ddpm_v2.html#step', 'miniai\\accel.py')},
            'miniai\\activations': { 'miniai\\activations.ActivationStats': ('activations.html#activationstats', 'miniai\\activations.py'),
                                     'miniai\\activations.ActivationStats.__init__': ( 'activations.html#__init__',
                                                                                       'miniai\\activations.py'),
                                     'miniai\\activations.ActivationStats.color_dim': ( 'activations.html#color_dim',
                                                                                        'miniai\\activations.py'),
                                     'miniai\\activations.ActivationStats.dead_chart': ( 'activations.html#dead_chart',
                                                                                         'miniai\\activations.py'),
                                     'miniai\\activations.ActivationStats.plot_stats': ( 'activations.html#plot_stats',
                                                                                         'miniai\\activations.py'),
                                     'miniai\\activations.Hook': ('activations.html#hook', 'miniai\\activations.py'),
                                     'miniai\\activations.Hook.__del__': ('activations.html#__del__', 'miniai\\activations.py'),
                                     'miniai\\activations.Hook.__init__': ('activations.html#__init__', 'miniai\\activations.py'),
                                     'miniai\\activations.Hook.remove': ('activations.html#remove', 'miniai\\activations.py'),
                                     'miniai\\activations.Hooks': ('activations.html#hooks', 'miniai\\activations.py'),
                                     'miniai\\activations.Hooks.__del__': ('activations.html#__del__', 'miniai\\activations.py'),
                                     'miniai\\activations.Hooks.__delitem__': ('activations.html#__delitem__', 'miniai\\activations.py'),
                                     'miniai\\activations.Hooks.__enter__': ('activations.html#__enter__', 'miniai\\activations.py'),
                                     'miniai\\activations.Hooks.__exit__': ('activations.html#__exit__', 'miniai\\activations.py'),
                                     'miniai\\activations.Hooks.__init__': ('activations.html#__init__', 'miniai\\activations.py'),
                                     'miniai\\activations.Hooks.remove': ('activations.html#remove', 'miniai\\activations.py'),
                                     'miniai\\activations.HooksCallback': ('activations.html#hookscallback', 'miniai\\activations.py'),
                                     'miniai\\activations.HooksCallback.__init__': ('activations.html#__init__', 'miniai\\activations.py'),
                                     'miniai\\activations.HooksCallback.__iter__': ('activations.html#__iter__', 'miniai\\activations.py'),
                                     'miniai\\activations.HooksCallback.__len__': ('activations.html#__len__', 'miniai\\activations.py'),
                                     'miniai\\activations.HooksCallback._hookfunc': ( 'activations.html#_hookfunc',
                                                                                      'miniai\\activations.py'),
                                     'miniai\\activations.HooksCallback.after_fit': ( 'activations.html#after_fit',
                                                                                      'miniai\\activations.py'),
                                     'miniai\\activations.HooksCallback.before_fit': ( 'activations.html#before_fit',
                                                                                       'miniai\\activations.py'),
                                     'miniai\\activations.append_stats': ('activations.html#append_stats', 'miniai\\activations.py'),
                                     'miniai\\activations.get_hist': ('activations.html#get_hist', 'miniai\\activations.py'),
                                     'miniai\\activations.get_min': ('activations.html#get_min', 'miniai\\activations.py'),
                                     'miniai\\activations.set_seed': ('activations.html#set_seed', 'miniai\\activations.py')},
            'miniai\\augment': { 'miniai\\augment.CapturePreds': ('augment.html#capturepreds', 'miniai\\augment.py'),
                                 'miniai\\augment.CapturePreds.after_batch': ('augment.html#after_batch', 'miniai\\augment.py'),
                                 'miniai\\augment.CapturePreds.after_fit': ('augment.html#after_fit', 'miniai\\augment.py'),
                                 'miniai\\augment.CapturePreds.before_fit': ('augment.html#before_fit', 'miniai\\augment.py'),
                                 'miniai\\augment.RandCopy': ('augment.html#randcopy', 'miniai\\augment.py'),
                                 'miniai\\augment.RandCopy.__init__': ('augment.html#__init__', 'miniai\\augment.py'),
                                 'miniai\\augment.RandCopy.forward': ('augment.html#forward', 'miniai\\augment.py'),
                                 'miniai\\augment.RandErase': ('augment.html#randerase', 'miniai\\augment.py'),
                                 'miniai\\augment.RandErase.__init__': ('augment.html#__init__', 'miniai\\augment.py'),
                                 'miniai\\augment.RandErase.forward': ('augment.html#forward', 'miniai\\augment.py'),
                                 'miniai\\augment._flops': ('augment.html#_flops', 'miniai\\augment.py'),
                                 'miniai\\augment._rand_copy1': ('augment.html#_rand_copy1', 'miniai\\augment.py'),
                                 'miniai\\augment._rand_erase1': ('augment.html#_rand_erase1', 'miniai\\augment.py'),
                                 'miniai\\augment.capture_preds': ('augment.html#capture_preds', 'miniai\\augment.py'),
                                 'miniai\\augment.rand_copy': ('augment.html#rand_copy', 'miniai\\augment.py'),
                                 'miniai\\augment.rand_erase': ('augment.html#rand_erase', 'miniai\\augment.py'),
                                 'miniai\\augment.show_image_batch': ('augment.html#show_image_batch', 'miniai\\augment.py'),
                                 'miniai\\augment.summary': ('augment.html#summary', 'miniai\\augment.py')},
            'miniai\\conv': { 'miniai\\conv.collate_device': ('convolutions.html#collate_device', 'miniai\\conv.py'),
                              'miniai\\conv.conv': ('convolutions.html#conv', 'miniai\\conv.py'),
                              'miniai\\conv.to_device': ('convolutions.html#to_device', 'miniai\\conv.py')},
            'miniai\\datasets': { 'miniai\\datasets.DataLoaders': ('datasets.html#dataloaders', 'miniai\\datasets.py'),
                                  'miniai\\datasets.DataLoaders.__init__': ('datasets.html#__init__', 'miniai\\datasets.py'),
                                  'miniai\\datasets.DataLoaders.from_dd': ('datasets.html#from_dd', 'miniai\\datasets.py'),
                                  'miniai\\datasets.collate_dict': ('datasets.html#collate_dict', 'miniai\\datasets.py'),
                                  'miniai\\datasets.get_grid': ('datasets.html#get_grid', 'miniai\\datasets.py'),
                                  'miniai\\datasets.inplace': ('datasets.html#inplace', 'miniai\\datasets.py'),
                                  'miniai\\datasets.show_image': ('datasets.html#show_image', 'miniai\\datasets.py'),
                                  'miniai\\datasets.show_images': ('datasets.html#show_images', 'miniai\\datasets.py'),
                                  'miniai\\datasets.subplots': ('datasets.html#subplots', 'miniai\\datasets.py')},
            'miniai\\diffusion': { 'miniai\\diffusion.DownBlock': ('diffusion-attn-cond.html#downblock', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.DownBlock.__init__': ('diffusion-attn-cond.html#__init__', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.DownBlock.forward': ('diffusion-attn-cond.html#forward', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.EmbResBlock': ('diffusion-attn-cond.html#embresblock', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.EmbResBlock.__init__': ('diffusion-attn-cond.html#__init__', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.EmbResBlock.forward': ('diffusion-attn-cond.html#forward', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.EmbUNetModel': ('diffusion-attn-cond.html#embunetmodel', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.EmbUNetModel.__init__': ('diffusion-attn-cond.html#__init__', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.EmbUNetModel.forward': ('diffusion-attn-cond.html#forward', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.SelfAttention': ('diffusion-attn-cond.html#selfattention', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.SelfAttention.__init__': ( 'diffusion-attn-cond.html#__init__',
                                                                                 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.SelfAttention.forward': ('diffusion-attn-cond.html#forward', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.SelfAttention2D': ( 'diffusion-attn-cond.html#selfattention2d',
                                                                          'miniai\\diffusion.py'),
                                   'miniai\\diffusion.SelfAttention2D.forward': ( 'diffusion-attn-cond.html#forward',
                                                                                  'miniai\\diffusion.py'),
                                   'miniai\\diffusion.UpBlock': ('diffusion-attn-cond.html#upblock', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.UpBlock.__init__': ('diffusion-attn-cond.html#__init__', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.UpBlock.forward': ('diffusion-attn-cond.html#forward', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.abar': ('diffusion-attn-cond.html#abar', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.collate_ddpm': ('diffusion-attn-cond.html#collate_ddpm', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.cond_sample': ('diffusion-attn-cond.html#cond_sample', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.ddim_step': ('diffusion-attn-cond.html#ddim_step', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.dl_ddpm': ('diffusion-attn-cond.html#dl_ddpm', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.inv_abar': ('diffusion-attn-cond.html#inv_abar', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.lin': ('diffusion-attn-cond.html#lin', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.noisify': ('diffusion-attn-cond.html#noisify', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.pre_conv': ('diffusion-attn-cond.html#pre_conv', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.sample': ('diffusion-attn-cond.html#sample', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.saved': ('diffusion-attn-cond.html#saved', 'miniai\\diffusion.py'),
                                   'miniai\\diffusion.timestep_embedding': ( 'diffusion-attn-cond.html#timestep_embedding',
                                                                             'miniai\\diffusion.py'),
                                   'miniai\\diffusion.upsample': ('diffusion-attn-cond.html#upsample', 'miniai\\diffusion.py')},
            'miniai\\diffusion2': { 'miniai\\diffusion2.DownBlock': ('diffusion-attn-nodownsave.html#downblock', 'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.DownBlock.__init__': ( 'diffusion-attn-nodownsave.html#__init__',
                                                                               'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.DownBlock.forward': ( 'diffusion-attn-nodownsave.html#forward',
                                                                              'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.EmbResBlock': ( 'diffusion-attn-nodownsave.html#embresblock',
                                                                        'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.EmbResBlock.__init__': ( 'diffusion-attn-nodownsave.html#__init__',
                                                                                 'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.EmbResBlock.forward': ( 'diffusion-attn-nodownsave.html#forward',
                                                                                'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.EmbUNetModel': ( 'diffusion-attn-nodownsave.html#embunetmodel',
                                                                         'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.EmbUNetModel.__init__': ( 'diffusion-attn-nodownsave.html#__init__',
                                                                                  'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.EmbUNetModel.forward': ( 'diffusion-attn-nodownsave.html#forward',
                                                                                 'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.UpBlock': ('diffusion-attn-nodownsave.html#upblock', 'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.UpBlock.__init__': ( 'diffusion-attn-nodownsave.html#__init__',
                                                                             'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.UpBlock.forward': ( 'diffusion-attn-nodownsave.html#forward',
                                                                            'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.abar': ('diffusion-attn-nodownsave.html#abar', 'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.ddim_step': ('diffusion-attn-nodownsave.html#ddim_step', 'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.inv_abar': ('diffusion-attn-nodownsave.html#inv_abar', 'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.lin': ('diffusion-attn-nodownsave.html#lin', 'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.noisify': ('diffusion-attn-nodownsave.html#noisify', 'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.pre_conv': ('diffusion-attn-nodownsave.html#pre_conv', 'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.sample': ('diffusion-attn-nodownsave.html#sample', 'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.saved': ('diffusion-attn-nodownsave.html#saved', 'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.timestep_embedding': ( 'diffusion-attn-nodownsave.html#timestep_embedding',
                                                                               'miniai\\diffusion2.py'),
                                    'miniai\\diffusion2.upsample': ('diffusion-attn-nodownsave.html#upsample', 'miniai\\diffusion2.py')},
            'miniai\\fid': { 'miniai\\fid.ImageEval': ('fid.html#imageeval', 'miniai\\fid.py'),
                             'miniai\\fid.ImageEval.__init__': ('fid.html#__init__', 'miniai\\fid.py'),
                             'miniai\\fid.ImageEval.fid': ('fid.html#fid', 'miniai\\fid.py'),
                             'miniai\\fid.ImageEval.get_feats': ('fid.html#get_feats', 'miniai\\fid.py'),
                             'miniai\\fid.ImageEval.kid': ('fid.html#kid', 'miniai\\fid.py'),
                             'miniai\\fid._calc_fid': ('fid.html#_calc_fid', 'miniai\\fid.py'),
                             'miniai\\fid._calc_kid': ('fid.html#_calc_kid', 'miniai\\fid.py'),
                             'miniai\\fid._calc_stats': ('fid.html#_calc_stats', 'miniai\\fid.py'),
                             'miniai\\fid._sqrtm_newton_schulz': ('fid.html#_sqrtm_newton_schulz', 'miniai\\fid.py'),
                             'miniai\\fid._squared_mmd': ('fid.html#_squared_mmd', 'miniai\\fid.py')},
            'miniai\\imports': {},
            'miniai\\init': { 'miniai\\init.BatchTransformCB': ('initializing.html#batchtransformcb', 'miniai\\init.py'),
                              'miniai\\init.BatchTransformCB.__init__': ('initializing.html#__init__', 'miniai\\init.py'),
                              'miniai\\init.BatchTransformCB.before_batch': ('initializing.html#before_batch', 'miniai\\init.py'),
                              'miniai\\init.GeneralRelu': ('initializing.html#generalrelu', 'miniai\\init.py'),
                              'miniai\\init.GeneralRelu.__init__': ('initializing.html#__init__', 'miniai\\init.py'),
                              'miniai\\init.GeneralRelu.forward': ('initializing.html#forward', 'miniai\\init.py'),
                              'miniai\\init._lsuv_stats': ('initializing.html#_lsuv_stats', 'miniai\\init.py'),
                              'miniai\\init.clean_ipython_hist': ('initializing.html#clean_ipython_hist', 'miniai\\init.py'),
                              'miniai\\init.clean_mem': ('initializing.html#clean_mem', 'miniai\\init.py'),
                              'miniai\\init.clean_tb': ('initializing.html#clean_tb', 'miniai\\init.py'),
                              'miniai\\init.conv': ('initializing.html#conv', 'miniai\\init.py'),
                              'miniai\\init.get_model': ('initializing.html#get_model', 'miniai\\init.py'),
                              'miniai\\init.init_weights': ('initializing.html#init_weights', 'miniai\\init.py'),
                              'miniai\\init.lsuv_init': ('initializing.html#lsuv_init', 'miniai\\init.py'),
                              'miniai\\init.plot_func': ('initializing.html#plot_func', 'miniai\\init.py')},
            'miniai\\learner': { 'miniai\\learner.Callback': ('learner.html#callback', 'miniai\\learner.py'),
                                 'miniai\\learner.CancelBatchException': ('learner.html#cancelbatchexception', 'miniai\\learner.py'),
                                 'miniai\\learner.CancelEpochException': ('learner.html#cancelepochexception', 'miniai\\learner.py'),
                                 'miniai\\learner.CancelFitException': ('learner.html#cancelfitexception', 'miniai\\learner.py'),
                                 'miniai\\learner.DeviceCB': ('learner.html#devicecb', 'miniai\\learner.py'),
                                 'miniai\\learner.DeviceCB.__init__': ('learner.html#__init__', 'miniai\\learner.py'),
                                 'miniai\\learner.DeviceCB.before_batch': ('learner.html#before_batch', 'miniai\\learner.py'),
                                 'miniai\\learner.DeviceCB.before_fit': ('learner.html#before_fit', 'miniai\\learner.py'),
                                 'miniai\\learner.LRFinderCB': ('learner.html#lrfindercb', 'miniai\\learner.py'),
                                 'miniai\\learner.LRFinderCB.__init__': ('learner.html#__init__', 'miniai\\learner.py'),
                                 'miniai\\learner.LRFinderCB.after_batch': ('learner.html#after_batch', 'miniai\\learner.py'),
                                 'miniai\\learner.LRFinderCB.before_fit': ('learner.html#before_fit', 'miniai\\learner.py'),
                                 'miniai\\learner.LRFinderCB.cleanup_fit': ('learner.html#cleanup_fit', 'miniai\\learner.py'),
                                 'miniai\\learner.Learner': ('learner.html#learner', 'miniai\\learner.py'),
                                 'miniai\\learner.Learner.__getattr__': ('learner.html#__getattr__', 'miniai\\learner.py'),
                                 'miniai\\learner.Learner.__init__': ('learner.html#__init__', 'miniai\\learner.py'),
                                 'miniai\\learner.Learner._fit': ('learner.html#_fit', 'miniai\\learner.py'),
                                 'miniai\\learner.Learner._one_batch': ('learner.html#_one_batch', 'miniai\\learner.py'),
                                 'miniai\\learner.Learner._one_epoch': ('learner.html#_one_epoch', 'miniai\\learner.py'),
                                 'miniai\\learner.Learner.callback': ('learner.html#callback', 'miniai\\learner.py'),
                                 'miniai\\learner.Learner.fit': ('learner.html#fit', 'miniai\\learner.py'),
                                 'miniai\\learner.Learner.one_epoch': ('learner.html#one_epoch', 'miniai\\learner.py'),
                                 'miniai\\learner.Learner.training': ('learner.html#training', 'miniai\\learner.py'),
                                 'miniai\\learner.MetricsCB': ('learner.html#metricscb', 'miniai\\learner.py'),
                                 'miniai\\learner.MetricsCB.__init__': ('learner.html#__init__', 'miniai\\learner.py'),
                                 'miniai\\learner.MetricsCB._log': ('learner.html#_log', 'miniai\\learner.py'),
                                 'miniai\\learner.MetricsCB.after_batch': ('learner.html#after_batch', 'miniai\\learner.py'),
                                 'miniai\\learner.MetricsCB.after_epoch': ('learner.html#after_epoch', 'miniai\\learner.py'),
                                 'miniai\\learner.MetricsCB.before_epoch': ('learner.html#before_epoch', 'miniai\\learner.py'),
                                 'miniai\\learner.MetricsCB.before_fit': ('learner.html#before_fit', 'miniai\\learner.py'),
                                 'miniai\\learner.MomentumLearner': ('learner.html#momentumlearner', 'miniai\\learner.py'),
                                 'miniai\\learner.MomentumLearner.__init__': ('learner.html#__init__', 'miniai\\learner.py'),
                                 'miniai\\learner.MomentumLearner.zero_grad': ('learner.html#zero_grad', 'miniai\\learner.py'),
                                 'miniai\\learner.ProgressCB': ('learner.html#progresscb', 'miniai\\learner.py'),
                                 'miniai\\learner.ProgressCB.__init__': ('learner.html#__init__', 'miniai\\learner.py'),
                                 'miniai\\learner.ProgressCB._log': ('learner.html#_log', 'miniai\\learner.py'),
                                 'miniai\\learner.ProgressCB.after_batch': ('learner.html#after_batch', 'miniai\\learner.py'),
                                 'miniai\\learner.ProgressCB.after_epoch': ('learner.html#after_epoch', 'miniai\\learner.py'),
                                 'miniai\\learner.ProgressCB.before_epoch': ('learner.html#before_epoch', 'miniai\\learner.py'),
                                 'miniai\\learner.ProgressCB.before_fit': ('learner.html#before_fit', 'miniai\\learner.py'),
                                 'miniai\\learner.SingleBatchCB': ('learner.html#singlebatchcb', 'miniai\\learner.py'),
                                 'miniai\\learner.SingleBatchCB.after_batch': ('learner.html#after_batch', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainCB': ('learner.html#traincb', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainCB.__init__': ('learner.html#__init__', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainCB.backward': ('learner.html#backward', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainCB.get_loss': ('learner.html#get_loss', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainCB.predict': ('learner.html#predict', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainCB.step': ('learner.html#step', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainCB.zero_grad': ('learner.html#zero_grad', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainLearner': ('learner.html#trainlearner', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainLearner.backward': ('learner.html#backward', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainLearner.get_loss': ('learner.html#get_loss', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainLearner.predict': ('learner.html#predict', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainLearner.step': ('learner.html#step', 'miniai\\learner.py'),
                                 'miniai\\learner.TrainLearner.zero_grad': ('learner.html#zero_grad', 'miniai\\learner.py'),
                                 'miniai\\learner.lr_find': ('learner.html#lr_find', 'miniai\\learner.py'),
                                 'miniai\\learner.run_cbs': ('learner.html#run_cbs', 'miniai\\learner.py'),
                                 'miniai\\learner.to_cpu': ('learner.html#to_cpu', 'miniai\\learner.py'),
                                 'miniai\\learner.with_cbs': ('learner.html#with_cbs', 'miniai\\learner.py'),
                                 'miniai\\learner.with_cbs.__call__': ('learner.html#__call__', 'miniai\\learner.py'),
                                 'miniai\\learner.with_cbs.__init__': ('learner.html#__init__', 'miniai\\learner.py')},
            'miniai\\resnet': { 'miniai\\resnet.ResBlock': ('resnet.html#resblock', 'miniai\\resnet.py'),
                                'miniai\\resnet.ResBlock.__init__': ('resnet.html#__init__', 'miniai\\resnet.py'),
                                'miniai\\resnet.ResBlock.forward': ('resnet.html#forward', 'miniai\\resnet.py'),
                                'miniai\\resnet._conv_block': ('resnet.html#_conv_block', 'miniai\\resnet.py')},
            'miniai\\sgd': { 'miniai\\sgd.BaseSchedCB': ('accel_sgd.html#baseschedcb', 'miniai\\sgd.py'),
                             'miniai\\sgd.BaseSchedCB.__init__': ('accel_sgd.html#__init__', 'miniai\\sgd.py'),
                             'miniai\\sgd.BaseSchedCB._step': ('accel_sgd.html#_step', 'miniai\\sgd.py'),
                             'miniai\\sgd.BaseSchedCB.before_fit': ('accel_sgd.html#before_fit', 'miniai\\sgd.py'),
                             'miniai\\sgd.BatchSchedCB': ('accel_sgd.html#batchschedcb', 'miniai\\sgd.py'),
                             'miniai\\sgd.BatchSchedCB.after_batch': ('accel_sgd.html#after_batch', 'miniai\\sgd.py'),
                             'miniai\\sgd.EpochSchedCB': ('accel_sgd.html#epochschedcb', 'miniai\\sgd.py'),
                             'miniai\\sgd.EpochSchedCB.after_epoch': ('accel_sgd.html#after_epoch', 'miniai\\sgd.py'),
                             'miniai\\sgd.HasLearnCB': ('accel_sgd.html#haslearncb', 'miniai\\sgd.py'),
                             'miniai\\sgd.HasLearnCB.after_fit': ('accel_sgd.html#after_fit', 'miniai\\sgd.py'),
                             'miniai\\sgd.HasLearnCB.before_fit': ('accel_sgd.html#before_fit', 'miniai\\sgd.py'),
                             'miniai\\sgd.RecorderCB': ('accel_sgd.html#recordercb', 'miniai\\sgd.py'),
                             'miniai\\sgd.RecorderCB.__init__': ('accel_sgd.html#__init__', 'miniai\\sgd.py'),
                             'miniai\\sgd.RecorderCB.after_batch': ('accel_sgd.html#after_batch', 'miniai\\sgd.py'),
                             'miniai\\sgd.RecorderCB.before_fit': ('accel_sgd.html#before_fit', 'miniai\\sgd.py'),
                             'miniai\\sgd.RecorderCB.plot': ('accel_sgd.html#plot', 'miniai\\sgd.py')},
            'miniai\\stability': {},
            'miniai\\training': { 'miniai\\training.Dataset': ('minibatch_training.html#dataset', 'miniai\\training.py'),
                                  'miniai\\training.Dataset.__getitem__': ('minibatch_training.html#__getitem__', 'miniai\\training.py'),
                                  'miniai\\training.Dataset.__init__': ('minibatch_training.html#__init__', 'miniai\\training.py'),
                                  'miniai\\training.Dataset.__len__': ('minibatch_training.html#__len__', 'miniai\\training.py'),
                                  'miniai\\training.accuracy': ('minibatch_training.html#accuracy', 'miniai\\training.py'),
                                  'miniai\\training.fit': ('minibatch_training.html#fit', 'miniai\\training.py'),
                                  'miniai\\training.get_dls': ('minibatch_training.html#get_dls', 'miniai\\training.py'),
                                  'miniai\\training.report': ('minibatch_training.html#report', 'miniai\\training.py')}}}